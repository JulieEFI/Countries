{"version":3,"sources":["components/header/header.component.tsx","components/countries/countries-items.component.tsx","hooks/useGetCountries.ts","pages/about/about.page.tsx","pages/home/home.page.tsx","common/apolo-client.ts","components/app/app.component.tsx","index.tsx"],"names":["Header","Layout","HeaderMain","className","theme","mode","defaultSelectedKeys","Item","to","Title","Typography","CountriesGrid","countries","searchInputHolder","current","columns","key","title","dataIndex","filters","text","value","onFilter","record","code","startsWith","filterSearch","sorter","a","b","sortDirections","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","onChange","e","target","onPressEnter","type","onClick","icon","SearchOutlined","size","filterIcon","onFilterDropdownVisibleChange","visible","setTimeout","select","capital","toLowerCase","includes","name","emoji","continent","navigate","useNavigate","length","level","rowKey","dataSource","bordered","shape","tip","GET_COUNTRIES","gql","Content","About","useQuery","error","data","console","log","useGetCountries","Home","autoplay","dotPosition","errorLink","onError","graphQLErrors","networkError","forEach","message","locations","path","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ApolloProvider","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abec7fff.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Layout, Menu } from 'antd';\r\nimport './header.component.css';\r\nconst { Header} = Layout;\r\n\r\nconst HeaderMain:React.FC = () => {\r\n    return (\r\n        <Header className=\"\">\r\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n            <Menu.Item key='1'><NavLink to=\"/\">Home</NavLink></Menu.Item> \r\n            <Menu.Item key='2'><NavLink to=\"/countries\">Countries</NavLink></Menu.Item> \r\n            </Menu>\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default HeaderMain;","import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nimport { Country } from \"../../common/interfaces/country.interface\";\r\nimport { Button, Input, Spin, Table } from \"antd\";\r\nimport { ColumnsType } from \"antd/es/table\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface CountriesGridProps {\r\n  countries: Country[];\r\n}\r\n\r\nconst CountriesGrid: React.FC<CountriesGridProps> = ({\r\n  countries,\r\n}: CountriesGridProps) => {\r\n  const searchInputHolder: { current: Input | null } = { current: null };\r\n\r\n  const columns: ColumnsType<Country> = [\r\n    {\r\n      key: \"name\",\r\n      title: \"Code\",\r\n      dataIndex: \"code\",\r\n      filters: [\r\n        {\r\n          text: \"CH\",\r\n          value: \"CH\",\r\n        },\r\n        {\r\n          text: \"US\",\r\n          value: \"US\",\r\n        },\r\n        {\r\n          text: \"BY\",\r\n          value: \"BY\",\r\n        },\r\n        {\r\n          text: \"RU\",\r\n          value: \"RU\",\r\n        },\r\n        {\r\n          text: \"FR\",\r\n          value: \"FR\",\r\n        },\r\n      ],\r\n      onFilter: (value: any, record: any) => record?.code?.startsWith(value),\r\n      filterSearch: true,\r\n      sorter: (a, b) => {\r\n        if (a.code < b.code) return -1;\r\n        if (a.code > b.code) return 1;\r\n        return 0;\r\n      },\r\n      sortDirections: [\"descend\"],\r\n    },\r\n    {\r\n      key: \"name\",\r\n      title: \"Country\",\r\n      dataIndex: \"name\",\r\n      filters: [\r\n        {\r\n          text: \"France\",\r\n          value: \"France\",\r\n        },\r\n        {\r\n          text: \"Russia\",\r\n          value: \"Russia\",\r\n        },\r\n        {\r\n          text: \"Belarus\",\r\n          value: \"Belarus\",\r\n        },\r\n        {\r\n          text: \"China\",\r\n          value: \"China\",\r\n        },\r\n        {\r\n          text: \"Germany\",\r\n          value: \"Germany\",\r\n        },\r\n      ],\r\n      filterDropdown: ({\r\n        setSelectedKeys,\r\n        selectedKeys,\r\n        confirm,\r\n        clearFilters,\r\n      }) => (\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            ref={(node) => {\r\n              searchInputHolder.current = node;\r\n            }}\r\n            placeholder=\"Search Country\"\r\n            value={selectedKeys[0]}\r\n            onChange={(e) =>\r\n              setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n            }\r\n            onPressEnter={() => confirm()}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => confirm()}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={clearFilters}>Reset</Button>\r\n        </div>\r\n      ),\r\n      filterIcon: () => {\r\n        return <SearchOutlined></SearchOutlined>;\r\n      },\r\n      onFilterDropdownVisibleChange: (visible) => {\r\n        if (visible) {\r\n          setTimeout(() => searchInputHolder.current?.select());\r\n        }\r\n      },\r\n      onFilter: (value: any, record: any) => {\r\n        return record?.capital?.toLowerCase().includes(value.toLowerCase());\r\n      },\r\n      sorter: (a, b) => {\r\n        if (a.name < b.name) return -1;\r\n        if (a.name > b.name) return 1;\r\n        return 0;\r\n      },\r\n      sortDirections: [\"descend\"],\r\n    },\r\n\r\n    {\r\n      key: \"name\",\r\n      title: \"Flag\",\r\n      dataIndex: \"emoji\",\r\n      sorter: (a, b) => {\r\n        if (a.emoji < b.emoji) return -1;\r\n        if (a.emoji > b.emoji) return 1;\r\n        return 0;\r\n      },\r\n      sortDirections: [\"descend\"],\r\n    },\r\n    {\r\n      key: \"name\",\r\n      title: \"Capital\",\r\n      dataIndex: \"capital\",\r\n      filterDropdown: ({\r\n        setSelectedKeys,\r\n        selectedKeys,\r\n        confirm,\r\n        clearFilters,\r\n      }) => (\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            ref={(node) => {\r\n              searchInputHolder.current = node;\r\n            }}\r\n            placeholder=\"Search capital\"\r\n            value={selectedKeys[0]}\r\n            onChange={(e) =>\r\n              setSelectedKeys(e.target.value ? [e.target.value] : [])\r\n            }\r\n            onPressEnter={() => confirm()}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => confirm()}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={clearFilters}>Reset</Button>\r\n        </div>\r\n      ),\r\n      filterIcon: () => {\r\n        return <SearchOutlined></SearchOutlined>;\r\n      },\r\n      onFilterDropdownVisibleChange: (visible) => {\r\n        if (visible) {\r\n          setTimeout(() => searchInputHolder.current?.select());\r\n        }\r\n      },\r\n      onFilter: (value: any, record: any) => {\r\n        return record?.capital?.toLowerCase().includes(value.toLowerCase());\r\n      },\r\n      sorter: (a, b) => {\r\n        if (a.capital < b.capital) return -1;\r\n        if (a.capital > b.capital) return 1;\r\n        return 0;\r\n      },\r\n      sortDirections: [\"descend\"],\r\n    },\r\n\r\n    {\r\n      key: \"name\",\r\n      title: \"Continent\",\r\n      dataIndex: [\"continent\", \"name\"],\r\n      filters: [\r\n        {\r\n          text: \"Europe\",\r\n          value: \"Europe\",\r\n        },\r\n        {\r\n          text: \"Asia\",\r\n          value: \"Asia\",\r\n        },\r\n        {\r\n          text: \"Africa\",\r\n          value: \"Africa\",\r\n        },\r\n        {\r\n          text: \"North America\",\r\n          value: \"North America\",\r\n        },\r\n        {\r\n          text: \"South America\",\r\n          value: \"South America\",\r\n        },\r\n        {\r\n          text: \"Oceania\",\r\n          value: \"Oceania\",\r\n        },\r\n      ],\r\n      onFilter: (value: any, record: any) =>\r\n        record?.continent?.name?.startsWith(value),\r\n      filterSearch: true,\r\n      sorter: (a, b) => {\r\n        if (a.continent.name < b.continent.name) return -1;\r\n        if (a.continent.name > b.continent.name) return 1;\r\n        return 0;\r\n      },\r\n      sortDirections: [\"descend\"],\r\n    },\r\n  ];\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const goToHomePage = () => {\r\n    navigate(`/`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.length > 0 ? (\r\n        <>\r\n          <Title level={1}>Info about countries</Title>\r\n          <Table<Country>\r\n            rowKey=\"name\"\r\n            columns={columns}\r\n            dataSource={countries}\r\n            size=\"large\"\r\n            bordered\r\n          />\r\n          <div className=\"table__button\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"default\"\r\n              size=\"large\"\r\n              onClick={goToHomePage}\r\n            >\r\n              Go Back\r\n            </Button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {\" \"}\r\n          <Spin className=\"table__loading\" tip=\"Loading...\"></Spin>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesGrid;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Country } from \"../common/interfaces/country.interface\";\r\n\r\nconst GET_COUNTRIES = gql`\r\n    query GetCountries {\r\n        countries {\r\n            code\r\n            name\r\n            emoji\r\n            capital\r\n            continent {\r\n                name\r\n            }\r\n          }\r\n    }\r\n`\r\n\r\nexport const useGetCountries = (): Country[] | undefined => {\r\n    const { error, data} = useQuery(GET_COUNTRIES);\r\n    \r\n    if (error) console.log(error)\r\n\r\n    return data?.countries;\r\n}\r\n","import React from \"react\";\r\nimport CountriesGrid from \"../../components/countries/countries-items.component\";\r\nimport {useGetCountries} from \"../../hooks/useGetCountries\"\r\nimport { Layout} from 'antd';\r\n\r\nconst {Content} = Layout;\r\n\r\nconst About:React.FC = () => {\r\n    const countries = useGetCountries();\r\n    return (\r\n        <>\r\n         <Content style={{ padding: '0 50px' }}> <CountriesGrid  countries={countries || []} /></Content>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Carousel } from \"antd\";\r\nimport { Layout } from \"antd\";\r\nimport \"./home.page.css\";\r\nimport \"antd/dist/antd.css\";\r\nconst { Content } = Layout;\r\n\r\n\r\nconst Home: React.FC = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const goToAnotherPage= () => {\r\n            navigate(`/countries`);\r\n    }\r\n    \r\n  return (\r\n    <>\r\n      <Content style={{ padding: \"20px 50px\" }}>\r\n        <>\r\n        <div className=\"home__main\">\r\n            <div className=\"home__slider\">\r\n          <Carousel autoplay dotPosition={\"left\"}>\r\n                <div>\r\n                  <h2 className=\"home home-background1\">Countries</h2>\r\n                </div>\r\n                <div>\r\n                  <h2 className=\"home home-background2\">Info</h2>\r\n                </div>\r\n                <div>\r\n                  <h2 className=\"home home-background3\">Sorting</h2>\r\n                </div>\r\n                <div>\r\n                  <h2 className=\"home home-background4\">Filtration</h2>\r\n                </div>\r\n          </Carousel>\r\n          </div>\r\n          <div className=\"home__button\">\r\n                <Button type=\"primary\" shape=\"default\" size=\"large\" onClick={goToAnotherPage}>Get started</Button>\r\n              </div>\r\n          </div>\r\n        </>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\r\n\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors)\r\n    graphQLErrors.forEach(({ message, locations, path }) =>\r\n      console.log(\r\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n      )\r\n    );\r\n  if (networkError) console.log(`[Network error]: ${networkError}`);\r\n});\r\n\r\nconst link = from([\r\n  errorLink,\r\n  new HttpLink({ uri: \"https://countries.trevorblades.com/\" }),\r\n]);\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: link,\r\n});\r\n\r\nexport default client;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport  \"./app.component.css\";\r\nimport Header from '../header/header.component';\r\nimport About from '../../pages/about/about.page';\r\nimport Home from '../../pages/home/home.page';\r\n\r\nimport client from '../../common/apolo-client';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n                <Header />\r\n                <Routes>\r\n                <Route path=\"/\" element={<Home/>}/>\r\n                <Route path=\"/countries\" element={<About/>}/>\r\n    \r\n                </Routes>\r\n            </Router>\r\n        </ApolloProvider>\r\n      \r\n    );\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app/app.component\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}